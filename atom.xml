<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sinsoledad-tech.github.io</id>
    <title>sinsoledad-tech</title>
    <updated>2021-02-21T14:45:10.766Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sinsoledad-tech.github.io"/>
    <link rel="self" href="https://sinsoledad-tech.github.io/atom.xml"/>
    <logo>https://sinsoledad-tech.github.io/images/avatar.png</logo>
    <icon>https://sinsoledad-tech.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, sinsoledad-tech</rights>
    <entry>
        <title type="html"><![CDATA[make]]></title>
        <id>https://sinsoledad-tech.github.io/post/make/</id>
        <link href="https://sinsoledad-tech.github.io/post/make/">
        </link>
        <updated>2021-02-21T12:48:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-程序的构建">1 程序的构建</h1>
<p>compile：源文件到目标可执行文件的产生过程<br>
build：compile的安排过程</p>
<h1 id="2-make历史">2 make历史</h1>
<p>诞生于1977年，开始用于C语言构建，当前可用于针对任何文件有变动的项目构建过程，都可使用make进行构建。<br>
由于历史原因，当前make常见的版本有make、gmake、nmake、cmake、Dmake等。其本质都是为compile指定一个build过程。</p>
<pre><code class="language-shell">make：最早的make命令，主要是一些非GNU OS上面（比如Solaris）默认的make命令；
[gmake](https://www.gnu.org/software/make/manual/make.html#Rule-Introduction)：GNU make，Linux OS下面的make就是gmake，之所以与make区别，主要是make在非GNU OS上被占用；
nmake：windows下自带的make
BSD make：freeBSD自带的make称为BSD make，部分makefile与make不兼容
Dmake：类似于gmake，其命令格式自成一体，适配Linux、Solaris、Windows 以及其他平台。dmake能够以网格、分布、并行或串行模式生成目标，实际上dmake是make的超集，make可以很自然改为dmake。
cmake：cmake和scons是两个著名的跨平台编译工具，cmake来源于KDE 4的autotools（相当于延续传统编译过程，改良原有的automake、autoconf等工具），而scons则来源于lighttpd，现在转向python（相当于直接消除现有编译工具的调用，直接调用编译器）。 
</code></pre>
<h1 id="3-make规则">3 make规则</h1>
<p>主要明确：build目标的前置条件，以及如何build</p>
<pre><code class="language-shell">&lt;target目标，必需&gt; : &lt;prerequisites前置条件&gt;
&lt;tab开头，必需&gt; &lt;commands&gt;
</code></pre>
<h2 id="32-targets">3.2 targets</h2>
<p>一般为文件名，也可以是某个操作的名字（称为伪目标，phony target）</p>
<pre><code class="language-make">target.o: prerequifle1 prerequifile2
    $(CC) -o target.o 
</code></pre>
<p>make clean：用伪目标创建</p>
<pre><code class="language-make">clean:
    rm -f *.o
# 如果文件中刚好存在一个名为clean的文件，那么上述命令则不会被执行，因为make认为clean文件存在就不用再去build
# 为了避免上述情况，需要显式的指定目标为伪目标，这样就不存在上述情况 了。
.PHONY: clean
clean:
    rm -f *.o
</code></pre>
<h2 id="32-prerequisites">3.2 prerequisites</h2>
<p>前置条件通常是一组文件名，之间用空格分隔。它指定了&quot;目标&quot;是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的last-modification时间戳比目标的时间戳新），&quot;目标&quot;就需要重新构建。</p>
<pre><code class="language-make">target.log: requireFile1 requireFile2 requireFile3
    cp requireFile1 target.log
</code></pre>
<h2 id="33-commands">3.3 commands</h2>
<p>命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建&quot;目标&quot;的具体指令，它的运行结果通常就是生成目标文件。<br>
每行命令之前必须有一个tab键。如果想用其他键，可以用内置变量.RECIPEPREFIX声明。</p>
<pre><code class="language-make">.PRECIPEPREFIX = &gt;
all:
&gt;echo hello,world
</code></pre>
<p>需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。</p>
<pre><code class="language-make">var-lost:
    export foo=bar
    echo &quot;foo=[$$foo]&quot;
</code></pre>
<p>上面代码执行后（make var-lost），取不到foo的值。因为两行命令在两个不同的进程执行。一个解决办法是将两行命令写在一行，中间用分号分隔。</p>
<pre><code class="language-make">var-lost:
    export foo=bar; echo &quot;foo=[$$foo]&quot;
</code></pre>
<p>另一个解决办法是在换行符前加反斜杠转义。</p>
<pre><code class="language-make">var-lost:
    export foo=bar; \
    echo &quot;foo=[$$foo]&quot;
</code></pre>
<p>最后一个方法是加上.ONESHELL:命令。</p>
<pre><code class="language-make">.ONESHELL:
var-lost:
    export foo=bar
    echo &quot;foo=[$$foo]&quot;
</code></pre>
<h1 id="4-make语法">4 make语法</h1>
<h2 id="41-echoing">4.1 echoing</h2>
<p>make默认会打印每条命令，然后再执行，称为echoing</p>
<h2 id="42-注释">4.2 注释</h2>
<p>默认#为注释</p>
<h2 id="43-通配符">4.3 通配符</h2>
<p>通配符（wildcard）用来指定一组符合条件的文件名。Makefile 的通配符与 Bash 一致，主要有星号（*）、问号（？）和 [...] 。比如， *.o 表示所有后缀名为o的文件。</p>
<h2 id="44-模式匹配">4.4 模式匹配</h2>
<p>Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。</p>
<pre><code class="language-make">%.o: %.c
    $(CC) -C -o %.o %.c
</code></pre>
<h2 id="45-变量和赋值">4.5 变量和赋值</h2>
<p>Makefile 允许使用等号自定义变量。</p>
<pre><code class="language-make">txt = Hello World
test:
    @echo $(txt)
</code></pre>
<p>上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 $( ) 之中。<br>
调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。</p>
<pre><code class="language-make">test:
    @echo $$HOME
</code></pre>
<p>有时，变量的值可能指向另一个变量。</p>
<pre><code class="language-make">v1 = $(v2)
</code></pre>
<p>上面代码中，变量 v1 的值是另一个变量 v2。这时会产生一个问题，v1 的值到底在定义时扩展（静态扩展），还是在运行时扩展（动态扩展）？如果 v2 的值是动态的，这两种扩展方式的结果可能会差异很大。<br>
为了解决类似问题，Makefile一共提供了四个赋值运算符 （=、:=、？=、+=），它们的区别请看StackOverflow。</p>
<pre><code class="language-shell">VARIABLE = value
# 在执行时扩展，允许递归扩展。
VARIABLE := value
# 在定义时扩展。
VARIABLE ?= value
# 只有在该变量为空时才设置值。
VARIABLE += value
# 将值追加到变量的尾端。
</code></pre>
<h2 id="46-内置变量">4.6 内置变量</h2>
<p>Make命令提供一系列内置变量，比如，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>C</mi><mi>C</mi><mo>)</mo><mi mathvariant="normal">指</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">前</mi><mi mathvariant="normal">使</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">编</mi><mi mathvariant="normal">译</mi><mi mathvariant="normal">器</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">(CC) 指向当前使用的编译器，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">编</span><span class="mord cjk_fallback">译</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">，</span></span></span></span>(MAKE) 指向当前使用的Make工具。<br>
<a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html">详细内置变量</a></p>
<h2 id="47-自动变量">4.7 自动变量</h2>
<p>Make命令还提供一些自动变量，它们的值与当前规则有关。主要有以下几个。</p>
<h3 id="">$@</h3>
<p>$@指代当前目标，就是Make命令当前构建的那个目标。比如，make foo的 $@ 就指代foo。</p>
<pre><code class="language-make">a.txt b.txt: 
    touch $@
# 等同于下面的写法。
a.txt:
    touch a.txt
b.txt:
    touch b.txt
</code></pre>
<h3 id="-2">$&lt;</h3>
<p>$&lt; 指代第一个前置条件。比如，规则为 t: p1 p2，那么 $&lt; 就指代p1。</p>
<pre><code class="language-make">a.txt: b.txt c.txt
    cp $&lt; $@ 
# 等同于下面的写法。
a.txt: b.txt c.txt
    cp b.txt a.txt 
</code></pre>
<h3 id="-3">$?</h3>
<p>$? 指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新， $?就指代p2。</p>
<h3 id="-4">$^</h3>
<p>$^ 指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。</p>
<h3 id="-5">$*</h3>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo><mi mathvariant="normal">指</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">匹</mi><mi mathvariant="normal">配</mi><mi mathvariant="normal">符</mi></mrow><annotation encoding="application/x-tex">* 指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">匹</span><span class="mord cjk_fallback">配</span><span class="mord cjk_fallback">符</span></span></span></span>* 就表示 f1。</p>
<h3 id="d-和-f">$(@D) 和 $(@F)</h3>
<p>$(@D) 和  $(@F) 分别指向  $@ 的目录名和文件名。比如， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">@</mi><mi mathvariant="normal">是</mi><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">/</mi><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">那</mi><mi mathvariant="normal">么</mi></mrow><annotation encoding="application/x-tex">@是 src/input.c，那么</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">@</span><span class="mord cjk_fallback">是</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord">/</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">么</span></span></span></span>(@D) 的值为 src ，$(@F) 的值为 input.c。</p>
<h3 id="d-和-f-2">$(&lt;D) 和 $(&lt;F)</h3>
<p>$(&lt;D) 和  $(&lt;F) 分别指向 $&lt; 的目录名和文件名。<br>
所有的自动变量清单，请看<a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html">手册</a>。下面是自动变量的一个例子。</p>
<pre><code class="language-make">dest/%.txt: src/%.txt
    @[ -d dest ] || mkdir dest
    cp $&lt; $@
</code></pre>
<p>上面代码将 src 目录下的 txt 文件，拷贝到 dest 目录下。首先判断 dest 目录是否存在，如果不存在就新建，然后，$&lt; 指代前置文件（src/%.txt）， $@ 指代目标文件（dest/%.txt）。</p>
<h2 id="48-判断和循环">4.8 判断和循环</h2>
<p>Makefile使用 Bash 语法，完成判断和循环。</p>
<pre><code class="language-make">ifeq ($(CC),gcc)
  libs=$(libs_for_gcc)
else
  libs=$(normal_libs)
endif
</code></pre>
<p>上面代码判断当前编译器是否 gcc ，然后指定不同的库文件。</p>
<pre><code class="language-make">LIST = one two three
all:
    for i in $(LIST); do \
        echo $$i; \
    done
# 等同于
all:
    for i in one two three; do \
        echo $i; \
    done
</code></pre>
<h2 id="49-函数">4.9 函数</h2>
<p>Makefile 还可以使用函数，格式如下。</p>
<pre><code class="language-make">$(function arguments)
# 或者
${function arguments}
</code></pre>
<p>Makefile提供了许多内置函数，可供调用。下面是几个常用的内置函数。</p>
<h3 id="shell-函数">shell 函数</h3>
<p>shell 函数用来执行 shell 命令</p>
<pre><code class="language-shell">srcfiles := $(shell echo src/{00..99}.txt)
</code></pre>
<h3 id="wildcard-函数">wildcard 函数</h3>
<p>wildcard 函数用来在 Makefile 中，替换 Bash 的通配符。</p>
<pre><code class="language-make">srcfiles := $(wildcard src/*.txt)
</code></pre>
<h3 id="subst-函数">subst 函数</h3>
<p>subst 函数用来文本替换，格式如下。</p>
<pre><code class="language-make">$(subst from,to,text)
# 下面的例子将字符串&quot;feet on the street&quot;替换成&quot;fEEt on the strEEt&quot;。
$(subst ee,EE,feet on the street)
# 下面是一个稍微复杂的例子。
comma:= ,
empty:=
# space变量用两个空变量作为标识符，当中是一个空格
space:= $(empty) $(empty)
foo:= a b c
bar:= $(subst $(space),$(comma),$(foo))
# bar is now `a,b,c'.
</code></pre>
<h3 id="patsubst函数">patsubst函数</h3>
<p>patsubst 函数用于模式匹配的替换，格式如下。</p>
<pre><code class="language-make">$(patsubst pattern,replacement,text)
# 下面的例子将文件名&quot;x.c.c bar.c&quot;，替换成&quot;x.c.o bar.o&quot;。
$(patsubst %.c,%.o,x.c.c bar.c)
</code></pre>
<h3 id="替换后缀名">替换后缀名</h3>
<p>替换后缀名函数的写法是：变量名 + 冒号 + 后缀名替换规则。它实际上patsubst函数的一种简写形式。</p>
<pre><code class="language-make">min: $(OUTPUT:.js=.min.js)
上面代码的意思是，将变量OUTPUT中的后缀名 .js 全部替换成 .min.js 。
</code></pre>
<h1 id="5-makefile-的实例">5 Makefile 的实例</h1>
<h2 id="51-执行多个目标">5.1 执行多个目标</h2>
<pre><code class="language-make">.PHONY: cleanall cleanobj cleandiff

cleanall : cleanobj cleandiff
        rm program

cleanobj :
        rm *.o

cleandiff :
        rm *.diff
</code></pre>
<p>上面代码可以调用不同目标，删除不同后缀名的文件，也可以调用一个目标（cleanall），删除所有指定类型的文件。</p>
<h2 id="52-编译c语言项目">5.2 编译C语言项目</h2>
<pre><code class="language-make">edit : main.o kbd.o command.o display.o 
    cc -o edit main.o kbd.o command.o display.o

main.o : main.c defs.h
    cc -c main.c
kbd.o : kbd.c defs.h command.h
    cc -c kbd.c
command.o : command.c defs.h command.h
    cc -c command.c
display.o : display.c defs.h
    cc -c display.c

clean :
     rm edit main.o kbd.o command.o display.o

.PHONY: edit clean
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DNS]]></title>
        <id>https://sinsoledad-tech.github.io/post/dns/</id>
        <link href="https://sinsoledad-tech.github.io/post/dns/">
        </link>
        <updated>2021-02-20T16:02:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-关于dns">1 关于DNS</h1>
<p>域名系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53</p>
<h1 id="2-手动修改dns">2 手动修改DNS</h1>
<h2 id="21-常用dns域名">2.1 常用DNS域名</h2>
<h3 id="114dns">114DNS</h3>
<p>国内电信联通移动通用的DNS服务，解析率较高。<br>
纯净 无劫持 无需再忍受被强扭去看广告或粗俗网站之痛苦<br>
服务ip为：114.114.114.114 和 114.114.115.115</p>
<p>拦截 钓鱼病毒木马网站 增强网银、证券、购物、游戏、隐私信息安全<br>
服务ip为：114.114.114.119 和 114.114.115.119</p>
<p>学校或家长可选拦截 色情网站 保护少年儿童免受网络色情内容的毒害<br>
服务ip为：114.114.114.110 和 114.114.115.110</p>
<h3 id="阿里dns">阿里DNS</h3>
<p>服务ip为：223.5.5.5和223.6.6.6</p>
<h3 id="百度dns">百度DNS</h3>
<p>服务IP为:180.76.76.76</p>
<h3 id="360-dns">360 DNS</h3>
<p>服务ip为：电信：首选：101.226.4.6 联通：首选：123.125.81.6 移动：首选：101.226.4.6 铁通：首选：101.226.4.6</p>
<h3 id="google-dns">Google DNS</h3>
<p>服务ip为：8.8.8.8和8.8.4.4</p>
<h2 id="22-windows-dns修改">2.2 windows DNS修改</h2>
<p>打开网络和共享中心--&gt;更改适配器设置--&gt;右键连接的网络，选择属性--&gt;选择TCP/IPv4--&gt;选择属性--&gt;手动设置DNS地址（首选和备用）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://sinsoledad-tech.github.io/post/hello-gridea/</id>
        <link href="https://sinsoledad-tech.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>